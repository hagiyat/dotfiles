[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'haya14busa/dein-command.vim'

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
" http://d.hatena.ne.jp/osyo-manga/20130612/1371046408
let g:precious_enable_switch_CursorMoved = {
      \ "*" : 0,
      \ "toml" : 1
      \ }
let g:precious_enable_switch_CursorMoved_i = {
      \ "*" : 0,
      \ "toml" : 1
      \ }
" insert „Å´ÂÖ•„Å£„ÅüÊôÇ„Å´„Çπ„Ç§„ÉÉ„ÉÅ„Åó„ÄÅÊäú„Åë„ÅüÊôÇ„Å´ÂÖÉ„Å´Êàª„Åô
augroup switch_precious
  autocmd!
  autocmd InsertEnter * :PreciousSwitch
  autocmd InsertLeave * :PreciousReset
augroup END
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'kana/vim-submode'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDCreateDefaultMappings = 0
  let g:NERDSpaceDelims = 1
  nmap <Space>; <Plug>NERDCommenterToggle
  vmap <Space>; <Plug>NERDCommenterToggle
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0

nnoremap s <Nop>
map sh <Plug>(easymotion-linebackward)
map sj <Plug>(easymotion-j)
map sk <Plug>(easymotion-k)
map sl <Plug>(easymotion-lineforward)

" s{char}{char} to move to {char}{char}
nmap ss <Plug>(easymotion-overwin-f2)
vmap ss <Plug>(easymotion-bd-f2)
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'
depends = ['incsearch.vim', 'vim-easymotion']
hook_add = '''
function! s:incsearch_config(...) abort
  return incsearch#util#deepextend(deepcopy({
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {
  \     "\<C-l>": '<Over>(easymotion)'
  \   },
  \   'is_expr': 0
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))
'''

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
'''

[[plugins]]
repo = 'szw/vim-maximizer'
hook_add = '''
let g:maximizer_set_mapping_with_bang = 0
nnoremap <silent> <Space>ww :<C-u>MaximizerToggle<CR>
'''


[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = 'ale'
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'mode_map': {'c': 'NORMAL'},
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'readonly', 'fugitive', 'branch', 'filename', 'modified' ],
  \     [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]
  \   ],
  \   'right': [ [ 'percent' ],
  \              [ 'fileformat', 'fileencoding', 'filetype' ] ],
  \ },
  \ 'component_function': {
  \   'modified': 'LightLineModified',
  \   'readonly': 'LightLineReadonly',
  \   'fugitive': 'LightLineFugitive',
  \   'filename': 'LightLineFilename',
  \   'filepath': 'LightLineFilepath',
  \   'fileformat': 'LightLineFileformat',
  \   'filetype': 'LightLineFiletype',
  \   'fileencoding': 'LightLineFileencoding',
  \   'mode': 'LightLineMode'
  \ },
  " slash-// (required: nerd fonts)
  " \ 'separator': { 'left': "\ue0bc", 'right': "\ue0ba" },
  " \ 'subseparator': { 'left': "\ue0bd", 'right': "\ue0bb" },
  " slash-\\
  \ 'separator': { 'left': "\ue0b8", 'right': "\ue0be" },
  \ 'subseparator': { 'left': "\ue0b9", 'right': "\ue0bf" },
  " arrow
  " \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
  " \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
  \}
let b:ale_linters = {
      \   'javascript': ['eslint', 'eslint-plugin-vue'],
      \   'python': ['pyflakes', 'pep8'],
      \   'ruby': ['rubocop'],
      \   'tex': ['textlint'],
      \   'markdown': ['textlint'],
      \   'css': ['stylelint'],
      \}
let g:ale_statusline_format = ['E%d', 'W%d', 'ok']
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
" nmap <silent> <C-n> <Plug>(ale_next_wrap)

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? "\ue0a2" : ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ (&ft == 'denite' ? denite#get_status_source() :
        \ '' != expand('%') && winwidth(0) <=120 ? expand('%:t') : winwidth(0) >120 ? expand('%:p') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFilepath()
  return winwidth(0) <=120 ? expand('%:h') : ''
endfunction

function! LightLineFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head') && winwidth(0) > 55
      let _ = fugitive#head()
      return strlen(_) ? "\ue0a0 "._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 80 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 60 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  return winwidth(0) > 30 ? lightline#mode() : ''
endfunction
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
'''

[[plugins]]
repo = 'mhinz/vim-startify'
depends = 'neoterm'
hook_add = '''
function! s:filter_header(lines) abort
  let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
  " let centered_lines = map(copy(a:lines),
        " \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
  let centered_lines = map(copy(a:lines), 'repeat(" ", 4) . v:val')
  return centered_lines
endfunction
function! UpdateTags()
  ! exec zsh rtags
endfunction

let g:startify_custom_header = s:filter_header([
 \ '                     _     ',
 \ '  ___  ___ ___ _  __(_)_ _ ',
 \ ' / _ \/ -_) _ \ |/ / /  ` \',
 \ '/_//_/\__/\___/___/_/_/_/_/',
 \])
let g:startify_files_number = 5
let g:startify_custom_indices = split("w r t y u o p a s d f g v b n")
let g:startify_bookmarks = [
  \ '~/repos/dotfiles',
  \ '~/repos',
  \ '~/Dropbox/notes',
\ ]
let g:startify_commands = [
  \ ['open file_rec', ":Denite `finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`"],
  \ ['update ctags', ':GutentagsUpdate'],
  \ ]

let g:startify_list_order = [
  \ [join(['   üóÇ  MRU', getcwd()], ' ')],
  \ 'dir',
  \ ['   üõ†  Commands'],
  \ 'commands',
  \ ['   üè∑  Bookmarks'],
  \ 'bookmarks',
  \]
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_auto_colors = 1
let g:indent_guides_color_change_percent = 5
nmap <silent> <Space>gt <Plug>IndentGuidesToggle
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
    " required
    " python: pip install 'python-language-server[pycodestyle]'
    "         pip install 'python-language-server[yapf]'
    " javascript: (AUR)javascript-typescript-langserver
    set hidden
    let g:LanguageClient_autoStart = 1
    let g:LanguageClient_serverCommands = {
          \ 'python': ['pyls'],
          \ 'javascript': ['javascript-typescript-stdio'],
          \ }

nnoremap <Space>lm :call LanguageClient_contextMenu()<CR>
nnoremap <silent><Space>lh :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent><Space>ld :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent><Space>lr :call LanguageClient#textDocument_references()<CR>
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_linters = {
  \  'javascript': ['eslint'],
  \  'python': ['flake8'],
  \  'ruby': ['rubocop'],
  \}
let g:ale_sign_error = '‚®â'
let g:ale_sign_warning = '‚ö† '
let g:ale_statusline_format = ['‚®â %d', '‚ö† %d', '‚¨• ok']
let g:ale_echo_msg_error_str='E'
let g:ale_echo_msg_warning_str='W'
let g:ale_echo_msg_format='[%linter%] %s [%severity%]'
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
" let g:ale_set_loclist = 0
" let g:ale_set_quickfix = 1
" let g:ale_open_list = 1
" let g:ale_keep_list_window_open = 0
nmap <silent> <Space>sp <Plug>(ale_previous_wrap)
nmap <silent> <Space>sn <Plug>(ale_next_wrap)
'''

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'


################################################################
# colorschemes
################################################################
[[plugins]]
repo = 'KeitaNakamura/neodark.vim'
hook_add = '''
let g:neodark#use_256color = 1
function! EnableNeoDark()
  colorscheme neodark
  hi Normal guifg=#bcbcbc guibg=#242424
  hi IncSearch gui=bold,italic guifg=#ffcc00 guibg=#242424
  hi Search gui=bold,italic guifg=#ffa64d guibg=#242424
  hi LineNr guifg=#474646 guibg=#202020
  hi CursorLine guibg=#343434
  hi CursorLineNr guifg=#669999 guibg=#343434
  " hi CursorLine guibg=#182014
endfunction
autocmd VimEnter * nested call EnableNeoDark()
'''

[[plugins]]
repo = 'tyrannicaltoucan/vim-quantum'
hook_add = '''
let g:quantum_black=1
function! EnableQuantum()
  colorscheme quantum
  hi IncSearch gui=bold,italic guifg=#ffcc00 guibg=#242424
  hi Search gui=bold,italic guifg=#ffa64d guibg=#242424
  hi LineNr guifg=#474646 guibg=#202020
  hi CursorLine guibg=#343434
  hi CursorLineNr guifg=#669999 guibg=#343434
  hi MatchParen gui=bold guifg=#1affb2 guibg=#242424
endfunction
" autocmd VimEnter * nested call EnableQuantum()
'''

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
let g:onedark_termcolors=256
function! EnableOnedark()
  colorscheme onedark
  let g:lightline.colorscheme = 'onedark'
  hi Normal guifg=#abb2bf guibg=#242424
  hi IncSearch gui=bold,italic guifg=#ffcc00 guibg=#242424
  hi Search gui=bold,italic guifg=#ffa64d guibg=#242424
  hi LineNr guifg=#474646 guibg=#202020
  hi CursorLine guibg=#343434
  " hi CursorLineNr guifg=#669999 guibg=#343434
  hi MatchParen gui=bold guifg=#1affb2 guibg=#242424
endfunction
" autocmd VimEnter * nested call EnableOnedark()
'''
