[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
" http://d.hatena.ne.jp/osyo-manga/20130612/1371046408
let g:precious_enable_switch_CursorMoved = {
      \ "*" : 0,
      \ "toml" : 1
      \ }
let g:precious_enable_switch_CursorMoved_i = {
      \ "*" : 0,
      \ "toml" : 1
      \ }
" insert に入った時にスイッチし、抜けた時に元に戻す
augroup switch_precious
  autocmd!
  autocmd InsertEnter * :PreciousSwitch
  autocmd InsertLeave * :PreciousReset
augroup END
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'kana/vim-submode'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'jceb/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  let g:NERDCreateDefaultMappings = 0
  let g:NERDSpaceDelims = 1
  nmap <Space>; <Plug>NERDCommenterToggle
  vmap <Space>; <Plug>NERDCommenterToggle
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0

nnoremap s <Nop>
map sh <Plug>(easymotion-linebackward)
map sj <Plug>(easymotion-j)
map sk <Plug>(easymotion-k)
map sl <Plug>(easymotion-lineforward)

" s{char}{char} to move to {char}{char}
nmap ss <Plug>(easymotion-overwin-f2)
vmap ss <Plug>(easymotion-bd-f2)
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'
depends = ['incsearch.vim', 'vim-easymotion']
hook_add = '''
function! s:incsearch_config(...) abort
  return incsearch#util#deepextend(deepcopy({
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {
  \     "\<C-l>": '<Over>(easymotion)'
  \   },
  \   'is_expr': 0
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))
'''

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
'''

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
hook_add = '''
let g:gutentags_cache_dir = '~/.cache/ctags'
'''


[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  let g:airline_powerline_fonts = 1
  set laststatus=2
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
set laststatus=2
" let g:airline_theme='badwolf'
let g:airline_theme='tomorrow'
let g:airline_detect_modified=1
let g:airline#extensions#bufferline#enabled = 1
" unicode symbol
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'
" powerline symbol
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
'''

[[plugins]]
repo = 'mhinz/vim-startify'
depends = 'neoterm'
hook_add = '''
function! s:filter_header(lines) abort
  let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
  let centered_lines = map(copy(a:lines),
        \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
  return centered_lines
endfunction
function! UpdateTags()
  ! exec zsh rtags
endfunction

let g:startify_custom_header = s:filter_header([
 \ '                     _     ',
 \ '  ___  ___ ___ _  __(_)_ _ ',
 \ ' / _ \/ -_) _ \ |/ / /  ` \',
 \ '/_//_/\__/\___/___/_/_/_/_/',
 \])
let g:startify_files_number = 5
let g:startify_custom_indices = split("w r t y u o p a s d f g v b n")
let g:startify_bookmarks = [
  \ '~/repos/dotfiles',
  \ '~/repos',
  \ '~/Dropbox/notes',
\ ]
let g:startify_commands = [
  \ ['open file_rec', ":Denite `finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`"],
  \ ['update ctags', ':GutentagsUpdate'],
  \ ]

let g:startify_list_order = [
  \ [join(['  🙄 MRU', getcwd()], ' ')],
  \ 'dir',
  \ ['  🏃 Commands'],
  \ 'commands',
  \ ['  🤔 Bookmarks'],
  \ 'bookmarks',
  \]
'''

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'


################################################################
# colorschemes
################################################################
[[plugins]]
repo = 'AlessandroYorba/Alduin'
hook_add = '''
" autocmd VimEnter * nested colorscheme alduin
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
" autocmd VimEnter * nested colorscheme iceberg
'''

[[plugins]]
repo = 'KeitaNakamura/neodark.vim'
hook_add = '''
let g:neodark#background='black' " black, gray or brown
let g:neodark#use_256color = 1
function! EnableNeoDark()
  colorscheme neodark
  hi Normal guifg=#bcbcbc guibg=#242424
  hi IncSearch gui=bold,italic guifg=#ffcc00 guibg=#242424
  hi Search gui=bold,italic guifg=#ffa64d guibg=#242424
  hi LineNr guifg=#474646 guibg=#202020
  hi CursorLine guibg=#343434
  hi CursorLineNr guifg=#669999 guibg=#343434
  " hi CursorLine guibg=#182014
endfunction
autocmd VimEnter * nested call EnableNeoDark()
'''

[[plugins]]
repo = 'tyrannicaltoucan/vim-quantum'
hook_add = '''
let g:quantum_black=1
let g:airline_theme='quantum'
function! EnableQuantum()
  colorscheme quantum
  hi IncSearch gui=bold,italic guifg=#ffcc00 guibg=#242424
  hi Search gui=bold,italic guifg=#ffa64d guibg=#242424
  hi LineNr guifg=#474646 guibg=#202020
  hi CursorLine guibg=#343434
  hi CursorLineNr guifg=#669999 guibg=#343434
  hi MatchParen gui=bold guifg=#1affb2 guibg=#242424
endfunction
" autocmd VimEnter * nested call EnableQuantum()
'''

