[[plugins]]
repo = 'neoclide/coc.nvim'
merge = '0'
rev = 'release'
hook_add = '''
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

let g:coc_global_extensions = [
      \ 'coc-css',
      \ 'coc-elixir',
      \ 'coc-eslint',
      \ 'coc-html',
      \ 'coc-json',
      \ 'coc-lists',
      \ 'coc-solargraph',
      \ 'coc-tsserver',
      \ 'coc-vimlsp',
      \ 'coc-yaml',
      \ 'coc-docker',
      \ 'coc-python',
      \ ]

nmap <silent><Space>l [coc]

nmap [coc]gd <Plug>(coc-definition)
nmap [coc]gt <Plug>(coc-type-definition)
nmap [coc]gi <Plug>(coc-implementation)
nmap [coc]gr <Plug>(coc-references)
nmap [coc]gn <Plug>(coc-rename)

" nmap [coc]k <Plug>(coc-diagnostic-prev)
" nmap [coc]j <Plug>(coc-diagnostic-next)

" refs: https://qiita.com/joeeee44/items/d431ff5ab9fe7a424b13
xmap [coc]f  <Plug>(coc-format-selected)
nmap [coc]f  <Plug>(coc-format-selected)
augroup mygroup
  autocmd!
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

nnoremap [coc]a  :<C-u>CocList diagnostics<cr>
nnoremap [coc]e  :<C-u>CocList extensions<cr>
nnoremap [coc]c  :<C-u>CocList commands<cr>
nnoremap [coc]o  :<C-u>CocList outline<cr>
nnoremap [coc]s  :<C-u>CocList -I symbols<cr>
nnoremap [coc]j  :<C-u>CocNext<CR>
nnoremap [coc]k  :<C-u>CocPrev<CR>
nnoremap [coc]r  :<C-u>CocListResume<CR>

autocmd CursorHold * silent call CocActionAsync('highlight')
'''

[[plugins]]
repo = 'neoclide/coc-denite'
