[[plugins]]
repo = 'Shougo/ddu-ui-ff'
hook_add = '''
lua << EOF
vim.api.nvim_create_autocmd("FileType", {
  pattern = {"ddu-ff"},
  callback = function()
    -- set keymaps
    local bufopts = {noremap = true, silent = true, buffer = 0}
    vim.keymap.set(
      "n",
      "<CR>",
      function()
        return vim.fn['ddu#ui#ff#do_action']("itemAction")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "<space>",
      function()
        return vim.fn['ddu#ui#ff#do_action']("toggleSelectItem")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "i",
      function()
        return vim.fn['ddu#ui#ff#do_action']("openFilterWindow")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "/",
      function()
        return vim.fn['ddu#ui#ff#do_action']("openFilterWindow")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "p",
      function()
        return vim.fn['ddu#ui#ff#do_action']("preview")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "c",
      function()
        return vim.fn['ddu#ui#ff#do_action']("chooseAction")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "e",
      function()
        return vim.fn['ddu#ui#ff#do_action']("itemAction", {name = "edit"})
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "d",
      function()
        return vim.fn['ddu#ui#ff#do_action']("itemAction", {name = "delete"})
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "<Esc>",
      function()
        return vim.fn['ddu#ui#ff#do_action']("quit")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "q",
      function()
        return vim.fn['ddu#ui#ff#do_action']("quit")
      end,
      bufopts
    )
  end
})

vim.api.nvim_create_autocmd('FileType', {
  pattern = { 'ddu-ff-filter' },
  callback = function()
    local bufopts = {noremap = true, silent = true, buffer = 0}
    vim.keymap.set("i", "<CR>", "<Esc><Cmd>call ddu#ui#ff#close()<CR>", bufopts)
    vim.keymap.set(
      "i",
      "<Esc>",
      function()
        return vim.fn["ddu#ui#ff#close"]() and vim.fn["ddu#ui#ff#do_action"]("quit")
      end,
      bufopts
    )
    vim.keymap.set(
      "i",
      "<Tab>",
      function()
        return vim.fn["ddu#ui#ff#execute"]('call cursor(line(".")+1,0)')
      end,
      bufopts
    )
    vim.keymap.set(
      "i",
      "<Down>",
      function()
        return vim.fn["ddu#ui#ff#execute"]('call cursor(line(".")+1,0)')
      end,
      bufopts
    )
    vim.keymap.set(
      "i",
      "<S-Tab>",
      function()
        return vim.fn["ddu#ui#ff#execute"]('call cursor(line(".")-1,0)')
      end,
      bufopts
    )
    vim.keymap.set(
      "i",
      "<Up>",
      function()
        return vim.fn["ddu#ui#ff#execute"]('call cursor(line(".")-1,0)')
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "<Esc>",
      function()
        return function()
          vim.fn["ddu#ui#ff#close"]()
          vim.fn["ddu#ui#ff#do_action"]("quit")
        end
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "q",
      function()
        return function()
          vim.fn["ddu#ui#ff#close"]()
          vim.fn["ddu#ui#ff#do_action"]("quit")
        end
      end,
      bufopts
    )
  end
})
EOF
'''

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'shun/ddu-source-rg'

[[plugins]]
repo = 'Shougo/ddu-source-line'

[[plugins]]
repo = 'shun/ddu-source-buffer'

[[plugins]]
repo = 'matsui54/ddu-source-file_external'

[[plugins]]
repo = 'yuki-yano/ddu-filter-fzf'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['ddu-ui-ff', 'ddu-source-file_rec', 'ddu-source-line' 'ddu-filter-fzf', 'ddu-kind-file']
on_cmd = 'Ddu'
hook_add = '''
lua << EOF
vim.fn['ddu#custom#patch_global']({
  ui = 'ff',
  uiParams = {
    ff = {
      displaySourceName = 'short',
      prompt = '>',
      reversed = true,
      split = 'floating',
      floatingBorder = 'rounded',
      previewFloating = true,
      previewFloatingBorder = 'rounded',
      filterSplitDirection = 'floating',
      winRow = 0.5,
      winHeight = winh,
      winWidth = winw,
      previewRow = 0.5,
      previewHeight = winh,
      previewWidth = winw,
      startFilter = true,
      autoAction = {
        name = 'preview'
      },
    }
  },
  kindOptions = {
    file = {
      defaultAction = 'open',
    }
  },
  sourceOptions = {
    ['_'] = {
      matchers = { 'matcher_fzf' },
      ignoreCase = true,
    },
    command_history = {
      defaultAction = 'execute'
    },
    help = {
      defaultAction = 'open',
    }
  },
  filterParams = {
    matcher_fzf = {
      highlightMatched = 'Constant'
    }
  },
  sourceParams = {
    file_external = {
      cmd = { 'fd', '.', '-H', '-E', '__pycache__', '-t', 'f' },
    },
    rg = {
      args = { '--column', '--no-heading', '--color', 'never', '--json' }
    },
    directory_rec = {
      cmd = { 'fd', '.', '-H', '-t', '-d' }
    },
  },
  resume = true
})

local sources = {}

sources.find_files = function()
  vim.fn['ddu#start']({
    sources = {
      { name = 'file_rec' },
    },
  })
end

sources.live_grep = function()
  vim.fn['ddu#start']({
    volatile = true,
    sources = {
      { name = 'rg' },
    },
  })
end

sources.buffers = function()
  vim.fn['ddu#start']({
    sources = {
      { name = 'buffer' },
    },
  })
end

sources.line = function()
  vim.fn['ddu#start']({
    sources = {
      { name = 'line' },
    },
  })
end

vim.keymap.set('n', '<space>sf', function() return sources.find_files() end, { noremap = true, silent = true })
vim.keymap.set('n', '<space>sg', function() return sources.live_grep() end, { noremap = true, silent = true })
vim.keymap.set('n', '<space>sb', function() return sources.buffers() end, { noremap = true, silent = true })
vim.keymap.set('n', '<space>sl', function() return sources.line() end, { noremap = true, silent = true })
EOF
'''
