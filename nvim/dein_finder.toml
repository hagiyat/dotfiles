[[plugins]]
repo = 'Shougo/ddu-ui-ff'
hook_add = '''
lua << EOF
vim.api.nvim_create_autocmd("FileType", {
  pattern = {"ddu-ff"},
  callback = function()
    -- set keymaps
    local bufopts = {noremap = true, silent = true, buffer = 0}
    vim.keymap.set(
      "n",
      "<CR>",
      function()
        return vim.fn['ddu#ui#ff#do_action']("itemAction")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "<space>",
      function()
        return vim.fn['ddu#ui#ff#do_action']("toggleSelectItem")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "i",
      function()
        return vim.fn['ddu#ui#ff#do_action']("openFilterWindow")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "/",
      function()
        return vim.fn['ddu#ui#ff#do_action']("openFilterWindow")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "p",
      function()
        return vim.fn['ddu#ui#ff#do_action']("preview")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "c",
      function()
        return vim.fn['ddu#ui#ff#do_action']("chooseAction")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "e",
      function()
        return vim.fn['ddu#ui#ff#do_action']("itemAction", {name = "edit"})
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "d",
      function()
        return vim.fn['ddu#ui#ff#do_action']("itemAction", {name = "delete"})
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "<Esc>",
      function()
        return vim.fn['ddu#ui#ff#do_action']("quit")
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "q",
      function()
        return vim.fn['ddu#ui#ff#do_action']("quit")
      end,
      bufopts
    )
  end
})

vim.api.nvim_create_autocmd('FileType', {
  pattern = { 'ddu-ff-filter' },
  callback = function()
    local bufopts = {noremap = true, silent = true, buffer = 0}
    vim.keymap.set("i", "<CR>", "<Esc><Cmd>call ddu#ui#ff#close()<CR>", bufopts)
    vim.keymap.set(
      "i",
      "<Esc>",
      function()
        return vim.fn["ddu#ui#ff#close"]() and vim.fn["ddu#ui#ff#do_action"]("quit")
      end,
      bufopts
    )
    vim.keymap.set(
      "i",
      "<Tab>",
      function()
        return vim.fn["ddu#ui#ff#execute"]('call cursor(line(".")+1,0)')
      end,
      bufopts
    )
    vim.keymap.set(
      "i",
      "<Down>",
      function()
        return vim.fn["ddu#ui#ff#execute"]('call cursor(line(".")+1,0)')
      end,
      bufopts
    )
    vim.keymap.set(
      "i",
      "<S-Tab>",
      function()
        return vim.fn["ddu#ui#ff#execute"]('call cursor(line(".")-1,0)')
      end,
      bufopts
    )
    vim.keymap.set(
      "i",
      "<Up>",
      function()
        return vim.fn["ddu#ui#ff#execute"]('call cursor(line(".")-1,0)')
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "<Esc>",
      function()
        return function()
          vim.fn["ddu#ui#ff#close"]()
          vim.fn["ddu#ui#ff#do_action"]("quit")
        end
      end,
      bufopts
    )
    vim.keymap.set(
      "n",
      "q",
      function()
        return function()
          vim.fn["ddu#ui#ff#close"]()
          vim.fn["ddu#ui#ff#do_action"]("quit")
        end
      end,
      bufopts
    )
  end
})
EOF
'''

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'shun/ddu-source-rg'

[[plugins]]
repo = 'Shougo/ddu-source-line'

[[plugins]]
repo = 'shun/ddu-source-buffer'

[[plugins]]
repo = 'matsui54/ddu-source-file_external'

[[plugins]]
repo = 'lambdalisue/mr.vim'

[[plugins]]
repo = 'kuuote/ddu-source-mr'
depends = 'mr.vim'

[[plugins]]
repo = 'matsui54/ddu-source-help'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'

[[plugins]]
repo = 'Shougo/ddu-source-file'

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
depends = ['ddu-kind-file']
hook_add = '''
lua << EOF
local do_action = vim.fn['ddu#ui#filer#do_action']
vim.api.nvim_create_autocmd('FileType', {
  pattern = { 'ddu-filer' },
  callback = function()
    vim.api.nvim_buf_set_keymap(0, 'n', '<CR>', '', {
        silent = true,
        noremap = true,
        callback = function()
          if vim.fn['ddu#ui#filer#is_tree']() then
            -- do_action('expandItem', { mode = 'toggle' })
            do_action('itemAction', { name = 'narrow' })
          else
            do_action('itemAction', { mode = 'open' })
          end
        end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', '<ESC>', '', {
      silent = true,
      noremap = true,
      callback = function() do_action('quit') end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', 'q', '', {
      silent = true,
      noremap = true,
      callback = function() do_action('quit') end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', 'o', '', {
      silent = true,
      noremap = true,
      callback = function()
        do_action('expandItem', { mode = 'toggle' })
      end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', '.', '', {
      silent = true,
      noremap = true,
      callback = function()
        -- FIXME
        local result = vim.api.nvim_exec(
        [[
        function! s:ToggleHidden()
          let current = ddu#custom#get_current(b:ddu_ui_name)
          let source_options = get(current, 'sourceOptions', {})
          let source_options_file = get(source_options, 'file', {})
          let matchers = get(source_options_file, 'matchers', [])
          return empty(matchers) ? ['matcher_hidden'] : []
        endfunction
        call s:ToggleHidden()
        ]],
        true)
        do_action(
          'updateOptions', {
            sourceOptions = {
              file = {
                matchers = result
              }
            }
          }
        )
      end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', 'N', '', {
      silent = true,
      noremap = true,
      -- callback = function() do_action('itemAction', { name = 'newFile' }) end
      callback = function() do_action('itemAction', { name = 'newFile' }) end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', 'mk', '', {
      silent = true,
      noremap = true,
      callback = function() do_action('itemAction', { name = 'newDirectory' }) end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', 'c', '', {
      silent = true,
      noremap = true,
      callback = function() do_action('itemAction', { name = 'copy' }) end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', 'p', '', {
      silent = true,
      noremap = true,
      callback = function() do_action('itemAction', { name = 'paste' }) end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', 'r', '', {
      silent = true,
      noremap = true,
      callback = function() do_action('itemAction', { name = 'rename' }) end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', 'd', '', {
      silent = true,
      noremap = true,
      callback = function() do_action('itemAction', { name = 'delete' }) end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', 'cd', '', {
      silent = true,
      noremap = true,
      callback = function() do_action('itemAction', { name = 'change_vim_cwd' }) end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', 'l', '', {
      silent = true,
      noremap = true,
      callback = function()
        if vim.fn['ddu#ui#filer#is_tree']() then
          do_action('itemAction', { name = 'narrow' })
        else
          do_action('itemAction', { mode = 'open' })
        end
      end
    })
    vim.api.nvim_buf_set_keymap(0, 'n', 'h', '', {
      silent = true,
      noremap = true,
      callback = function()
        do_action(
          'itemAction', { name = 'narrow', params = { path = '..' } }
        )
      end
    })
  end
})
EOF
'''

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = [
  'ddu-ui-ff', 'ddu-ui-filer',
  'ddu-source-file_rec', 'ddu-source-file_external', 'ddu-source-line',
  'ddu-source-rg', 'ddu-source-buffer', 'ddu-source-mr', 'ddu-source-help',
  'ddu-filter-matcher_substring',
  'ddu-source-file', 'ddu-column-icon_filename', 'ddu-kind-file'
]
on_cmd = 'Ddu'
hook_add = '''
lua << EOF
vim.fn['ddu#custom#patch_global']({
  ui = 'ff',
  uiParams = {
    ff = {
      displaySourceName = 'short',
      prompt = '>',
      reversed = true,
      split = 'floating',
      floatingBorder = 'rounded',
      previewFloating = true,
      previewFloatingBorder = 'rounded',
      filterSplitDirection = 'floating',
      winCol = vim.fn.round(vim.api.nvim_get_option('columns') * 0.05),
      winWidth = vim.fn.round(vim.api.nvim_get_option('columns') * 0.9),
      previewHeight = winh,
      previewWidth = vim.fn.round(vim.api.nvim_get_option('columns') * 0.9),
      startFilter = true,
      autoAction = {
        name = 'preview'
      },
    }
  },
  kindOptions = {
    file = {
      defaultAction = 'open',
    }
  },
  sourceOptions = {
    ['_'] = {
      matchers = { 'matcher_substring' },
      ignoreCase = true,
    },
    command_history = {
      defaultAction = 'execute'
    },
    help = {
      defaultAction = 'open',
    }
  },
  filterParams = {
    matcher_substring = {
      highlightMatched = 'Title'
    }
  },
  sourceParams = {
    file_rec = {
      cmd = { 'fd', '--follow', '--hidden', '--exclude=.git', '--type=f' }
    },
    file_external = {
      cmd = { 'fd', '--follow', '--hidden', '--exclude=.git', '--type=f' }
    },
    rg = {
      args = { '--column', '--no-heading', '--color', 'never', '--json' }
    },
    directory_rec = {
      cmd = { 'fd', '.', '-H', '-t', '-d' }
    },
  },
  resume = true
})

local sources = {}

sources.find_files = function()
  vim.fn['ddu#start']({
    sources = {
      {
        name = 'file_external',
        params = { ignoredDirectories = {'.git', 'node_modules', 'vendor'} }
      },
    },
  })
end

sources.file_rec = function()
  vim.fn['ddu#start']({
    sources = {
      {
        name = 'file_rec',
        params = { ignoredDirectories = {'.git'} }
      },
    },
  })
end

sources.live_grep = function()
  vim.fn['ddu#start']({
    volatile = true,
    sources = {
      { name = 'rg' },
    },
  })
end

sources.recent_items = function()
  vim.fn['ddu#start']({
    sources = {
      {
        name = 'buffer',
      },
      {
        name = 'mr',
        params = {
          current = true
        }
      }
    },
  })
end

sources.line = function()
  vim.fn['ddu#start']({
    sources = {
      { name = 'line' },
    },
  })
end

sources.help = function()
  vim.fn['ddu#start']({
    sources = {
      { name = 'help' },
    },
  })
end

vim.keymap.set('n', '<space>ff', function() return sources.find_files() end, { noremap = true, silent = true })
vim.keymap.set('n', '<space>fF', function() return sources.file_rec() end, { noremap = true, silent = true })
vim.keymap.set('n', '<space>fg', function() return sources.live_grep() end, { noremap = true, silent = true })
vim.keymap.set('n', '<space>fb', function() return sources.recent_items() end, { noremap = true, silent = true })
vim.keymap.set('n', '<space>fl', function() return sources.line() end, { noremap = true, silent = true })
vim.keymap.set('n', '<space>fh', function() return sources.help() end, { noremap = true, silent = true })


vim.fn['ddu#custom#patch_local']('filer', {
  ui = 'filer',
  sources = {
    {
      name = 'file',
      params = {},
    }
  },
  sourceOptions = {
    ['_'] = {
      columns = { 'icon_filename' },
    },
  },
  uiOptions = {
    filer = {
      toggle = true
    }
  },
  uiParams = {
    filer = {
      split = 'vertical',
      splitDirection = 'topleft',
      winwidth = 30,
      sort = 'filename',
      sortTreeFirst = true,
      search = vim.fn.expand('%:p')
    }
  },
  columnParams = {
    icon_filename = {
      defaultIcon = {
        icon = ''
      },
      useLinkIcon = 'grayout',
    }
  },
  kindOptions = {
    file = {
      defaultAction = 'open'
    }
  }
})

local filer = function()
  vim.fn['ddu#start']({
    name = 'filer'
  })
end
vim.keymap.set('n', '<space>fe', function() return filer() end, { noremap = true, silent = true })
EOF
'''
